import { NextResponse } from 'next/server';

// In-memory store for the last price, this is a simple solution for a simulated environment.
// In a real-world scenario, you'd use a database or a caching layer like Redis.
let lastPrice = 931.03;
let lastUpdateTime = Date.now();

export async function GET() {
  const now = Date.now();
  
  // Simulate price changes every few seconds to make it look dynamic
  const timeDiff = now - lastUpdateTime;
  const priceChangeInterval = 5 * 1000; // 5 seconds

  if (timeDiff > priceChangeInterval) {
    // Simulate a small price fluctuation
    const maxChange = 0.5; // Max change of $0.50
    const change = (Math.random() - 0.5) * maxChange;
    lastPrice = Math.max(0, lastPrice + change); // ensure price doesn't go below 0
    lastUpdateTime = now;
  }
  
  const price = parseFloat(lastPrice.toFixed(2));

  if (isNaN(price)) {
    console.error('Simulated Price Error: Generated an invalid price');
    return NextResponse.json({ error: 'Invalid price generated by simulation' }, { status: 500 });
  }

  return NextResponse.json({ price: price });
}
